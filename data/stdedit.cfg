///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Implements some editing utilities & commands:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EntityTypes = [
	"ammo"
	"base"
	"checkpoint"
	"envmap"
	"finish"
	"flag"
	"health"
	"jumppad"
	"light"
	"mapmodel"
	"particles"
	"playerstart"
	"sound"
	"spotlight"
	"start"
	"teledest"
	"teleport"
]
listcomplete "newent"    $EntityTypes
listcomplete "entfind"   $EntityTypes
listcomplete "clearents" $EntityTypes


EntitiesWithDirection = [
	"flag"
	"mapmodel"
	"playerstart"
	"teledest"
]


Labels_BlendPaintMode = [
	"off"
	"replace"           //"replace"         Black Paints & White Erases
	"paint"             //"dig"             Black Paints
	"erase inverse"     //"fill"            White Erases
	"paint inverse"     //"inverted dig"    White Paints
	"erase"             //"inverted fill"   Black Erases
]


Labels_TexRotate = [
	"0 degrees"
	"90 degrees"
	"180 degrees"
	"270 degrees"
	"flip X"
	"flip Y"
	"transpose"
	"flipped transpose"
]


Shader_Parameters = [
	"envscale"
	"glowcolor"
	"parallaxscale"
	"pulseglowcolor"
	"pulseglowspeed"
	"pulsespeed"
	"specscale"
]
listcomplete "addvshaderparam" $Shader_Parameters
listcomplete "vshaderparam"    $Shader_Parameters


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Entity -- Utilities:

=enttype = [ || [strcmp * $arg1] [strcmp (enttype)  $arg1] ]
=entattr = [ || [strcmp * $arg2] [= (entattr $arg1) $arg2] ]

//  Entity Attributes changed with "editpush":
EntActionCycle = [entset ( if ( > $arg1 -1 ) [ result $arg2 ] [ result $arg3 ] )]
EntAction_base         = [entproperty 0 ( * $arg1  1 )]
EntAction_teleport     = [entproperty 0 ( * $arg1  1 )]
EntAction_teledest     = [entproperty 1 ( * $arg1  1 )]
EntAction_mapmodel     = [entproperty 1 ( * $arg1  1 )]
EntAction_spotlight    = [entproperty 0 ( * $arg1  5 )]
EntAction_light        = [entproperty 0 ( * $arg1  5 )]
EntAction_jumppad      = [entproperty 0 ( * $arg1  5 )]
EntAction_respawnpoint = [entproperty 0 ( * $arg1 15 )]
EntAction_playerstart  = [entproperty 0 ( * $arg1 15 )]
EntAction_envmap       = [entproperty 0 ( * $arg1  5 )]
EntAction_particles    = [entproperty 0 ( * $arg1  1 )]
EntAction_sound        = [entproperty 0 ( * $arg1  1 )]
EntAction_ammo         = []
EntAction_health       = []

entdirection = [
	if (&& [enthavesel] [= (havesel) 0]) [
		if (>= (indexof $EntitiesWithDirection (enttype)) 0) [
			if (> $arg1 0) [
				entproperty 0 $arg2
				if (> (entattr 0) 360) [entproperty 0 -360]
			][
				entproperty 0 (- 0 $arg2)
				if (< (entattr 0) 0) [entproperty 0 360]
			]
		]
		result 1
	][
		result 0
	]
]


//#############################################################################################################################################
//  Entity -- Fix 'entediting' behavior:   ('edittoggle' & 'passthrough' both reset it)
nodebug [
	defvar myentediting 0 1 1 [ entediting $myentediting ]
]
myenteditingcheck = [ entediting $myentediting ]

//#############################################################################################################################################
//  Entity -- Commands:

//  Clear entities of given type:
clearents = [
	if $editing [
		entcancel
		entselect [ =enttype $arg1 ]
		echo "deleted" (enthavesel) $arg1 "entities."
		delent
	]
]

//  Modify given attribute of selected entity(s) by a given amount.
// ARGS  1: INDEX   Attribute 0 to 4.
//       2: INT     Delta
entproperty = [
	entattr $arg1 (+ (entattr $arg1) $arg2)
]

//  Same as above, but edits each selected entity individually.
//  Also, avoids odd behavior with Clicked_Selection + Hovered_Selection.
// ARGS  1: INDEX   Attribute 0 to 4.
//       2: INT     Delta
entproperty2 = [
	entloop [
		entattr $arg1 (+ (entattr $arg1) $arg2)
	]
]

// ARGS 1: INDEX    Attribute 0 to 4.
//      2: INT      Min, inclusive.
//      3: INT      Max, inclusive.
entattr_randomize = [
	cond [! $enthavesel            ] [error "ERROR -- entattr_randomize: entity selection required"
	]    [!= $numargs 3            ] [error "ERROR -- entattr_randomize: 3 args expected | args = INDEX(0-4) MIN MAX"
	]    [|| [< $arg1 0][> $arg1 4]] [error "ERROR -- entattr_randomize: invalid attribute index | args = INDEX(0-4) MIN MAX"
	]    [< $arg3 $arg2            ] [error "ERROR -- entattr_randomize: max less than min | args = INDEX(0-4) MIN MAX"
	][
		arg3 = (+ $arg3 1) // rnd MAX is not inclusive.
		entloop [entattr $arg1 (rnd $arg3 $arg2)]
	]
]

//  Replace all entities that match current selection with the values given:
replaceents = [
	if $editing [
		do [
			entfind @(entget)
			entset @(loopconcat i $numargs [result $[arg@(+ $i 1)]])
		]
		echo "Replaced" (enthavesel) "entities."
	]
]

//  Edit selected entity(s) via console:
selentedit = [ saycommand ( concatword "/entset " (entget) ) ]

//  Replace selected entity(s) via console:
selreplaceents = [ saycommand ( concatword "/replaceents " (entget) ) ]

//  Increase floatspeed while held
// TODO: make this not broken
// floatfaster = [ floatspeed (* $floatspeed 10); onrelease [floatspeed (div $floatspeed 10)] ] 
floatfaster = [ floatspeed 1000; onrelease [floatspeed 100] ]

//#############################################################################################################################################
//  Entity -- Commands - Selection:

//  Select entities with given properties:  ('*' is wildcard)
entfind = [
	if (= $numargs 0) [
		entselect 1
	][
		entselect (concat [ && [=enttype @@arg1] ] (loopconcat i (- $numargs 1) [
			result [ [=entattr @@i @@[arg@(+ $i 2)]] ]
		]))
	]
]
entfindinsel = [
	if (= $numargs 0) [
		entselect [insel]
	][
		entselect (
			concat [&& [insel] [=enttype @@arg1]] (
				loopconcat i (- $numargs 1) [ result [[=entattr @@i @@[arg@(+ $i 2)]]] ]
			)
		)
	]
]

//  Select all entities matching (type & attributes) current selection:
entfindsame = [ if (enthavesel) [do [entfind @(entget)]] ]
selentfindall = $entfindsame // Legacy Alias.

//  Select all entities matching (type only) current selection:
entfindsametype = [ if (enthavesel) [do [entfind @(enttype)]] ]

//  Select all pickup-type entities:
entfindpickups = [
	cancelsel
	entfind ammo
	entfind health
]

//  Change selected entity type via index-offset: (index of "EntityTypes" list)
//  Could be used for scrolling through entity types.
// ARGS  1: INT   Index offset.
enttypeselect = [
	local ListLen
	ListLen = (listlen $EntityTypes)

	//  Get old index, offset it, then wrap it:
	iNew = (mod (+ (indexof $EntityTypes (enttype)) $arg1) $ListLen)
	if (< $iNew 0) [iNew = (+ $iNew $ListLen)]

	do [entset @(listsplice (entget) (at $EntityTypes $iNew) 0 1)]
]

//  This won't be formated correctly without a fixed width font.
// ARGS  1: INT   Number of Entities per line.
lse = [
	local EntsPerLine String Count
	echo "^f~** Listing Selected Entities"
	if (> $arg1 0) [EntsPerLine = $arg1] [EntsPerLine = 4]
	String = ""
	Count = 0
	entloop [
		String = (concatword $String (entget) (loopconcatword n (- 32 (mod (strlen $entget) 32) ) [result " "]) )
		Count = (+ $Count 1)
		if (>= $Count $EntsPerLine) [ //  Echo string once n entities have been added.
			echo (concatword "^f~* " $String)
			String = ""
			Count = 0
		]
	]
	if (> $Count 0) [ echo (concatword "^f~* " $String) ] //  Echo last line if it wasn't echoed in loop.
	echo (concatword "^f~** " (enthavesel) " Entities Selected")
]


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  General Editing -- Utilities:

drag = [
	dragging 1
	onrelease [dragging 0]
]
corners = [
	selectcorners 1
	dragging 1
	onrelease [selectcorners 0; dragging 0]
]

editmove = [
	moving 1
	onrelease [moving 0]
	result $moving
]
entdrag = [
	entmoving 1
	onrelease [entmoving 0]
	result $entmoving
]
editdrag = [
	cancelsel
	|| [entdrag] [drag]
]

selcorners = [
	if $hmapedit [
		hmapselect
	][
		cancelsel
		|| [entdrag] [corners]
	]
]

editextend = [
	|| [entdrag] [ selextend; reorient; editmove ]
]

editmovewith = [
	if (havesel) [
		|| [editmove] [ @arg1 ]
		onrelease [ moving 0; dragging 0 ]
	][
		@arg1
	]
]


//#############################################################################################################################################
//  General Editing -- Vars:

nodebug [
	defvarp editpush_ents    0 1 1 //  Disable [MouseWheel  ] changing entities, use [MouseWheel + NumRow(1-5)] instead.
	defvarp editrotate_ents  0 1 1 //  Disable [MouseWheel+R] rotating entities, use [MouseWheel + NumRow(1-5)] instead.

	defvarp opaquepaste      0 1 1

	defvar  EDIT_CancelPaste 0 0 1

	EDIT_EntCopyBuf = "" //  Alias strings can be much longer.
]


//#############################################################################################################################################
//  General Editing -- Commands:

editdel = [ if (! (enthavesel)) [delcube]; delent ]

editflip = [ flip; entflip ]

editmovecorner = [ editmovewith selcorners ]
editmovedrag   = [ editmovewith editdrag   ]

// ARGS  1: INT   Delta
//       2: INT   EditFace Mode: 0 =  Push|Pull Cube-Face   [MouseWheel+F] (All 4 corners)
//                               1 = Empty|Fill Cube(s)     [MouseWheel  ] (Unless corners are explicitly selected, then Push|Pull selected corners.)
//                               2 =  Push|Pull Cube-Corner [MouseWheel+Q] (Corner pointed at. This is recursive if multiple cubes are selected.)
editpush = [
	if (|| [havesel] [! (enthavesel)] ) [
		//  Cubes:
		if $moving [        // "Moving" selection. [MouseRight] by default.
			pushsel $arg1
		][
			entcancel
			editface $arg1 $arg2
		]
	][
		//  Entities:
		if $editpush_ents [
			if $entmoving [ entpush $arg1 ] [ EntAction_@(enttype) $arg1 ]
		]
	]
]
editfacewentpush = $editpush // Legacy Alias.

editrotate = [
	if $blendpaintmode [
		rotateblendbrush $arg1
	][
		if $editrotate_ents [
			|| [ entdirection $arg1 15 ] [ rotate $arg1; entrotate $arg1 ] //<-- OR short-circuit exploit.
		][
			rotate $arg1
			entrotate $arg1  //  Rotate position in selection, not entity yaw attribute.
		]
	]
]


//#############################################################################################################################################
//  General Editing -- Copy & Paste:

//  Three types of copying and pasting:
//      Select+Copy Cubes         -->  Paste Cubes
//      Select+Copy Ent           -->  Paste Ent                If entity is selected, paste will replace selected entity.
//      Select+Copy Cubes & Ents  -->  Paste Cubes & Ents       With same relative positions.

editcopy = [
	if (|| [havesel] [! (enthavesel)]) [
		EDIT_EntCopyBuf = ""
		entcopy
		copy
	][
		EDIT_EntCopyBuf = (entget)
	]
]
editcut = [
	if (moving 1) [
		if (= $moving 1) [selsave]
		onrelease [
			moving 0
			if (selmoved) [
				selswap
				copy; entcopy
				delcube; delent
				selrestore
				paste; entpaste
			]
		]
	]
]

entreplace = [
	do [
		if (enthavesel) [] [ newent @EDIT_EntCopyBuf ]
		entset @EDIT_EntCopyBuf
	]
]
editpaste = [
	EDIT_CancelPaste = (! (|| [enthavesel] [havesel]));
	if (strcmp "" $EDIT_EntCopyBuf) [
		pastehilite
		reorient // temp; real fix will be in octaedit      temp you say?
		onrelease [
			if $opaquepaste delcube
			paste
			entpaste
			if $EDIT_CancelPaste [ cancelsel ]
		]
	] [
		entreplace
		if $EDIT_CancelPaste [ cancelsel ]
	]
]


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Material Volumes:

listcomplete editmat "air alpha clip death gameclip glass jumpreset lava noclip water"

//  Set material shortcuts:
air       = [ editmat air       $arg1 ]
alpha     = [ editmat alpha     $arg1 ]
clip      = [ editmat clip      $arg1 ]
death     = [ editmat death     $arg1 ]
gameclip  = [ editmat gameclip  $arg1 ]
jumpreset = [ editmat jumpreset $arg1 ]
noclip    = [ editmat noclip    $arg1 ]
loop i 4 [
	[water@(? $i (+ $i 1))] = [ editmat water@(? $i (+ $i 1)) $arg1 ]
	[lava@(? $i (+ $i 1))]  = [ editmat lava@(? $i (+ $i 1)) $arg1 ]
	[glass@(? $i (+ $i 1))] = [ editmat glass@(? $i (+ $i 1)) $arg1 ]
]


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Blend Map -- Utilities:

setblendpaintmode = [
	hmapedit 0
	if (> $numargs 0) [blendpaintmode $arg1] [blendpaintmode 0]
	//echo "blend paint mode set to:" (at $Labels_BlendPaintMode $blendpaintmode)       EditHud has this info now.
]

scrollblendbrush = [
	if (> $numargs 0) [nextblendbrush $arg1] [nextblendbrush]
	//echo "blend brush set to:" (getblendbrushname (curblendbrush))                    EditHud has this info now.
]


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Height Map -- Utilities:

nodebug [
	defvar  currentbrush 0 0 255
	defsvar currentbrushname ""

	defvar  HM_BrushCount -1 -1 255
]

togglehmapedit = [
	blendpaintmode 0
	hmapedit (= $hmapedit 0)
]

hmapsmooth = [editface 1 -1] //  This appears to have a smoothing-brush effect.

selectbrush = [
	if (< $HM_BrushCount 0) [
		clearbrush
		error "ERROR -- selectbrush: There are no defined heightmap brushes."
	][
		cond [< (- $currentbrush 1)              0] [currentbrush $HM_BrushCount
		]    [> (+ $currentbrush 1) $HM_BrushCount] [currentbrush 0
		][currentbrush (+ $currentbrush $arg1)]

		do [brush_@currentbrush]
		//echo "heightmap brush set to:" $currentbrushname                          EditHud has this info now.
	]
]


//#############################################################################################################################################
//  A heightmap brush has two parts:
//        brushmap: A 2D field that defines how the brush affects a heightmap.
//     brushhandle: A 2D vertex on the brushmap.
//                  This handle is a reference point on the brushmap which represents
//                  where the editing cursor is pointed at.

//  clearbrush                   : Resets the brushmap
//  brushvert <x> <y> <value>    : Set a point on the brushmap
//  brushx <x>                   : The x coordinate of the brushhandle
//  brushy <y>                   : The y coordinate of the brushhandle

HM_BrushVerts = [
	loop iY (listlen $arg1) [
		HM_BrushVert = (at $arg1 $iY)
		loop iX (listlen $HM_BrushVert) [
			brushvert $iX $iY (at $HM_BrushVert $iX)
		]
	]
]

// ARGS  1: STRING   Brush name
//       2: INT      Brush center X
//       3: INT      Brush center Y
//       4: [LIST]   Vert deltas ( rows = sub-lists )
newbrush = [
	HM_BrushCount (+ $HM_BrushCount 1)
	do [
		brush_@HM_BrushCount = [
			currentbrushname [@@@arg1]
			clearbrush
			@@(if (> $numargs 1) [ result [brushx @arg2; brushy @arg3; HM_BrushVerts [@@arg4]] ])
		]
	]
]


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Convenience Aliases:

// ARGS  1: STRING   ParamLabel
//       2: FLOAT    param.x|r
//       3: FLOAT    param.y|g
//       4: FLOAT    param.z|b
//       5: FLOAT    param.w|a
//  Same args as vshaderparam.
//  If vshaderparam already exists, it will be updated.
addvshaderparam = [ if (>= $numargs 2) [vdelta [vshaderparam $arg1 $arg2 $arg3 $arg4 $arg5]] ]


//  These will also show texture params set in map.cfg via: [ texalpha, texcolor, texlayer, texoffset, texrotate, texscale, texscroll ].
echovalpha = [echo (format "^f~** valpha: ^f5%1"                 (getvalpha $getseltex) )]
echovcolor = [echo (format "^f~** vcolor: ^f3%1 ^f0%2 ^f1%3" (at (getvcolor $getseltex) 0) (at (getvcolor $getseltex) 1) (at (getvcolor $getseltex) 2) )]
echovlayer = [
	if (!= (getvlayer $getseltex) 0) [
		echo (format "^f~** vlayer: ^f~[^f2%1^f~] ^f2^"%2^"" (getvlayer $getseltex) (gettexname (getvlayer $getseltex)) )
	][
		echo "^f~** vlayer: ^f~[^f2~^f~] ^f2^"none^""
	]
]
echovoffset = [echo (format "^f~** voffset: ^f3%1 ^f0%2" (at (getvoffset $getseltex) 0) (at (getvoffset $getseltex) 1) )]
echovrotate = [echo (format "^f~** vrotate: ^f2%1 ^f7^"%2^"" (getvrotate $getseltex) (at $Labels_TexRotate (getvrotate $getseltex)) )]
echovscale  = [echo (format "^f~** vscale: ^f2%1"            (getvscale  $getseltex) )]
echovscroll = [echo (format "^f~** vscroll: ^f3%1 ^f0%2" (at (getvscroll $getseltex) 0) (at (getvscroll $getseltex) 1) )]
echovsmooth = [echo (format "^f~** vsmooth: ^f3%1 ^f0%2"     (getvsmooth $getseltex) (getsmoothangle (getvsmooth $getseltex)) )]
//  This only works with vshaderparam, not with shaderparams set in map.cfg.
echovshaderparam = [
	echo (format "^f~** vshaderparam: ^f2^"%1^" %2" (getvshaderparamnames $getseltex) (getvshaderparam $getseltex (getvshaderparamnames $getseltex)) )
]


getgridpower = [gridlookup 1; onrelease [gridlookup 0]]


setsundir = [
	sunlightpitch $getcampitch
	sunlightyaw   $getcamyaw
]
getsundir = $setsundir


gettexplease = [
	gettex
	// Since you asked so nicely:
	if $getseltex [
		echo (concatword "^f0^t** GotTex: [" $getseltex "] ^"" (gettexname $getseltex) "^"")
	][
		echo (concatword "^f3^t** GotTex: [~~] ^"~~~~~^"")
	]
]


//  Set default skybox with lighting params:
lettherebelight = [
	skybox "skyboxes/remus/sky01"

	ambient 25 21 23

	skylight 148 153 163
	blurskylight 2

	sunlight 255 252 250
	sunlightscale 1.3
	sunlightpitch 43
	sunlightyaw 53
]
prettysky = $lettherebelight


minimaphere = [minimapheight (at (getcampos) 2)]


nodebug [
	defvar MSM_FullScreen 0 0    1
	defvar MSM_ResX       0 0 8192
	defvar MSM_ResY       0 0 8192
	defvar MSM_FOV        0 0  180
	defvar MSM_HideHud    0 0    1
	defvar MSM_Spectator  0 0    1
	defvar MSM__Active    0 0    1
]
togglemapshotmode = [
	if (= $getmode 1) [
		if $MSM__Active [
			fullscreen $MSM_FullScreen    ; MSM_FullScreen 0
			screenres  $MSM_ResX $MSM_ResY; MSM_ResX       0
											MSM_ResY       0
			fov        $MSM_FOV           ; MSM_FOV        0
			hidehud    $MSM_HideHud       ; MSM_HideHud    0
			spectator  $MSM_Spectator     ; MSM_Spectator  0

			sleep 100 [
				if (= $editing 0) [edittoggle]
				undo
				cancelsel
			]

			MSM__Active 0
		][
			if (= $editing 0) [edittoggle]

			cancelsel; entfindpickups; delent

			MSM_FullScreen $fullscreen ; fullscreen 0
			MSM_ResX       $scr_w
			MSM_ResY       $scr_h      ; screenres  768 768
			MSM_FOV        $fov        ; fov        70
			MSM_HideHud    $hidehud    ; hidehud    1
			MSM_Spectator  $isspectator; spectator  1

			MSM__Active 1
		]
	]
]


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
exec "data/edithud.cfg"

