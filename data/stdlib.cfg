///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Console language standard library:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Order of Execution:
//              "data/stdlib.cfg"       @
//              "data/font.cfg"
//              "data/keymap.cfg"
//              "data/stdedit.cfg"      @
//      EXEC        "data/edithud.cfg"
//              "data/sounds.cfg"
//              "data/menus.cfg"        **
//      EXEC        "data/maplists.cfg"
//      EXEC        "data/menus_*.cfg"
//              "data/heightmap.cfg"
//              "data/blendbrush.cfg"
//              "data/game_fps.cfg"     **
//              "servers.cfg"
//      IF NOT  "config.cfg"            ###
//                  "data/defaults.cfg"
//      WRITE       "restore.cfg"
//              "autoexec.cfg"          ###
//      DO      "playsong"
//              "auth.cfg"              ###     Put sensitive stuff in here, rather than "autoexec.cfg".
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  KEY BINDS:

//  Binds a key so that it will toggle a variable:
//      Example: bindvar 9 thirdperson
bindvar = [
	if (>= $numargs 3) [
		bind $arg1 [if (@arg3) [togglevar @@arg2]]
	][
		bind $arg1 [togglevar @arg2]
	]
]
bindvarquiet = [
	bind $arg1 [set @arg2 (= $@arg2 0)]
]

//  Same as above, but only binds for edit mode:
editbindvar = [
	if (>= $numargs 3) [
		editbind $arg1 [if (@arg3) [togglevar @@arg2]]
	][
		editbind $arg1 [togglevar @arg2]
	]
]
editbindvarquiet = [
	editbind $arg1 [set @arg2 (= $@arg2 0)]
]

//  Binds a key so that it will set a modifier while held down:
bindmod = [
	bind $arg1 [set @arg2 1; onrelease [set @@arg2 0]]
]

//  Same as above, but only binds for edit mode:
editbindmod = [
	editbind $arg1 [set @arg2 1; onrelease [set @@arg2 0]]
]


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  COLOR:
//#############################################################################################################################################
// ARGS  1: [LIST]  [ Red Grn Blu ]  0.0 to 1.0
// RETURNS: INT     0xRrGgBb
color_vectoint = [
	if (&& [= $numargs 1] [= (listlen $arg1) 3]) [
		local Red Grn Blu
		Red = (<< (+ 0 (round (*f (at $arg1 0) 255))) 16)
		Grn = (<< (+ 0 (round (*f (at $arg1 1) 255)))  8)
		Blu =     (+ 0 (round (*f (at $arg1 2) 255)))
		result (+ $Red (+ $Grn $Blu))
	][
		result -1
	]
]

//#############################################################################################################################################
// ARGS  1: [LIST]  [ Hue Sat Vib ]   H = 0.0 to 3.6    S,V = 0.0 to 1.0
// RETURNS: [LIST]  [ Red Grn Blu ]   R,G,B = 0.0 to 1.0
color_hsvtorgb = [
	if (&& [= $numargs 1] [= (listlen $arg1) 3]) [
		local Hue Sat Vib
		Hue = (at $arg1 0)
		Sat = (at $arg1 1)
		Vib = (at $arg1 2)

		local c x m

		c = (*f $Vib $Sat)

		x = (*f $Hue 1.66666666666666666667)
		x = (modf $x 2.0)
		x = (-f $x 1.0)
		x = (absf $x)
		x = (-f 1.0 $x)
		x = (*f $c $x)

		m = (-f $Vib $c)

		local Red Grn Blu

		cond [&& [>=f $Hue 0.0][<f  $Hue 0.6]] [Red =  $c; Grn =  $x; Blu = 0.0
		]    [&& [>=f $Hue 0.6][<f  $Hue 1.2]] [Red =  $x; Grn =  $c; Blu = 0.0
		]    [&& [>=f $Hue 1.2][<f  $Hue 1.8]] [Red = 0.0; Grn =  $c; Blu =  $x
		]    [&& [>=f $Hue 1.8][<f  $Hue 2.4]] [Red = 0.0; Grn =  $x; Blu =  $c
		]    [&& [>=f $Hue 2.4][<f  $Hue 3.0]] [Red =  $x; Grn = 0.0; Blu =  $c
		]    [&& [>=f $Hue 3.0][<=f $Hue 3.6]] [Red =  $c; Grn = 0.0; Blu =  $x
		]

		Red = (+f $Red $m)
		Grn = (+f $Grn $m)
		Blu = (+f $Blu $m)

		result (concat $Red $Grn $Blu)
	][
		result [-1 -1 -1]
	]
]

// ARGS  1: [LIST]  [ Red Grn Blu ]   R,G,B = 0.0 to 1.0
// RETURNS: [LIST]  [ Hue Sat Vib ]   H = 0.0 to 3.6    S,V = 0.0 to 1.0
color_rgbtohsv = [
	if (&& [= $numargs 1] [= (listlen $arg1) 3]) [
		local Red Grn Blu
		Red = (at $arg1 0)
		Grn = (at $arg1 1)
		Blu = (at $arg1 2)

		local Min Max Dlt
		Min = (minf $Red (minf $Grn $Blu))
		Max = (maxf $Red (maxf $Grn $Blu))
		Dlt = (-f $Max $Min)

		local Hue Sat Vib
		Vib = $Max

		if (&& (>f $Dlt 0.0) (>f $Max 0.0)) [
			Sat = (divf $Dlt $Max)

			cond [=f $Red $Max] [Hue =         (divf (-f $Grn $Blu) $Dlt)
			]    [=f $Grn $Max] [Hue = (+f 2.0 (divf (-f $Blu $Red) $Dlt) )
			]    [      1     ] [Hue = (+f 4.0 (divf (-f $Red $Grn) $Dlt) )
			]

			if (<f $Hue 0.0) [Hue = (+f $Hue 6.0)] // Wrap.

		  //Hue = (*f $Hue  1.66666666666666666667) // 0.0 to 1.0
			Hue = (*f $Hue  0.6) // 0.0 to   3.6
		  //Hue = (*f $Hue 60.0) // 0.0 to 360.0
		][
			Hue = 0.0
			Sat = 0.0
		]
		result (concat $Hue $Sat $Vib)
	][
		result [-1 -1 -1]
	]
]


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LISTS:

// ARGS  1: [LIST]   List must be sorted such that all duplicates are located next to each other.
// RETURNS: [LIST]   Purged of duplicates.
listpurgedups = [
	local ListLen; ListLen = (listlen $arg1)
	cond [!= $numargs 1] [error "ERROR -- listpurgedups: 1 arg expected. | args = LIST"
	]    [<= $ListLen 1] [error "ERROR -- listpurgedups: list with at least 2 items expected"
	][
		local Result; Result = $arg1
		i = $ListLen
		while [> $i 0] [
			if (=s (at $Result $i) (at $Result (- $i 1))) [
				Result = (listsplice $Result "" $i 1)
			]
			i = (- $i 1)
		]
		result $Result
	]
]

// ARGS  1: [LIST]
// RETURNS: [LIST]   Shuffled.
listshuffle = [
	local ListLen; ListLen = (listlen $arg1)
	cond [!= $numargs 1] [error "ERROR -- listshuffle: 1 arg expected. | args = LIST"
	]    [<= $ListLen 1] [error "ERROR -- listshuffle: list with at least 2 items expected"
	][
		local Result iSwap HoldMe
		Result = $arg1
		loop i (- $ListLen 1) [ //  -1, no need to swap last index with itself.
			//  Swap current item with any item AFTER it, including itself:
			iSwap = (rnd $ListLen $i)
			HoldMe = (escape (at $Result $i))
			Result = (listsplice $Result (escape (at $Result $iSwap)) $i     1)
			Result = (listsplice $Result             $HoldMe          $iSwap 1)
		]
		result $Result
	]
]

// ARGS  1: [LIST]
//       2: INDEX   ZeroInclusive
//       3: INDEX   ZeroInclusive
// RETURNS: [LIST]
listswap = [
	local ListLen; ListLen = (listlen $arg1)
	cond [!= $numargs 3                     ] [error "ERROR -- listswap: 3 args expected. | args = LIST INDEX INDEX"
	]    [<= $ListLen 1                     ] [error "ERROR -- listswap: list with at least 2 items expected"
	]    [|| [< $arg2 0] [>= $arg2 $ListLen]] [error "ERROR -- listswap: IndexA is out of range."
	]    [|| [< $arg3 0] [>= $arg3 $ListLen]] [error "ERROR -- listswap: IndexB is out of range."
	][
		local Result HoldMe
		Result = $arg1
		HoldMe = (escape (at $Result $arg2))
		Result = (listsplice $Result (escape (at $Result $arg3)) $arg2 1)
		Result = (listsplice $Result             $HoldMe         $arg3 1)
		result $Result
	]
]


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  MISCELLANEOUS:

FOV_GetHorzFromVert = [result (*f 2.0 (atan (*f (tan (divf $arg1 2.0)) (divf $scr_w $scr_h)) ))]
FOV_GetVertFromHorz = [result (*f 2.0 (atan (*f (tan (divf $fov  2.0)) (divf $scr_h $scr_w)) ))]
fovh = [
	if (> $numargs 0) [fov $arg1]
	echo "^f~fov vertical   =" (FOV_GetVertFromHorz)
	echo "^f~fov horizontal =" $fov
]
fovv = [
	if (> $numargs 0) [fov (round (FOV_GetHorzFromVert $arg1))]
	echo "^f~fov vertical   =" (FOV_GetVertFromHorz)
	echo "^f~fov horizontal =" $fov
]


+fround = [round (+f $arg1 $arg2) (absf $arg2)]


//  For clarity/readability.
ingame   = [if (isconnected)     [result 1] [result 0]]
ingamemp = [if (isconnected 0 0) [result 1] [result 0]]


//  Legacy-ish Alias.
loadsky = [
	skybox $arg1
	if (> $numargs 1) [ spinsky $arg2 ] [ if (!=f $spinsky 0.0) [spinsky 0.0] ]
]


//  Creates a macro whose body is a format string.
//      Example: macro greet [ say Hi, %1! ]
macro = [
	$arg1 = (concat [format [@@arg2]] (loopconcat i $numargs [concatword " $arg" (+ $i 1)]))
]


//  Legacy Alias.
mapmsg = [ maptitle $arg1 ]


//  Edit the contents of an alias/command/var via the console:  (Mostly useful for Lists.)
modify = [
	if (getalias $arg1)[
		if (> (listlen $$arg1) 1)[
			saycommand (concatword "/" $arg1 " = " (escape $$arg1))
		][  saycommand (concatword "/" $arg1 " = " $$arg1)
		]
	][
		if (> (listlen $$arg1) 1)[
			saycommand (concatword "/" $arg1 " " (escape $$arg1))
		][  saycommand (concatword "/" $arg1 " " $$arg1)
		]
	]
]


quine = [ echo (format "quine = [%1]" $quine) ]


reloadmap    = [map $mapname]
reloadmapcfg = [exec $mapcfgname]


soundbufferlengthtomillis = [
	if $stereo [
		result (divf (divf $soundbufferlen 2) $soundfreq)
	][  result (divf       $soundbufferlen    $soundfreq)
	]
]


togglevar = [
	set $arg1 (= $$arg1 0)
	if (= $$arg1 0) [echo $arg1 "OFF"] [echo $arg1 "ON"]
]
togglevarquiet = [
	set $arg1 (= $$arg1 0)
]
